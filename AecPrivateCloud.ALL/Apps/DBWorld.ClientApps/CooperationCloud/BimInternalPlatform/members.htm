<!DOCTYPE html>

<html lang="en" xmlns="http://www.w3.org/1999/xhtml">
<head>
    <meta charset="utf-8" />
    <title>项目成员</title>
    <link href="style/main.css" rel="stylesheet" />
    <!-- Include the jQuery Core library -->
    <script type="text/javascript" src="scripts/jquery-ui-1.10.0.custom/js/jquery-1.9.0.js"></script>
    <script type="text/javascript" src="scripts/jquery-ui-1.10.0.custom/js/jquery-ui-1.10.0.custom.min.js"></script>
    <link href="style/flatbutton.css" rel="stylesheet" />
    <!-- Helper scripts -->
    <script type="text/javascript" src="scripts/home_common.js"></script>
    <script type="text/javascript" src="scripts/listing_common.js"></script>
    <script type="text/javascript" src="scripts/UIControlLibrary/utilities.js"></script>
    <script type="text/javascript" src="scripts/UIControlLibrary/localization.js"></script>
    <script type="text/javascript" src="scripts/md/base.js"></script>
    <script type="text/javascript" src="scripts/cc/invite.js"></script>
	<script type="text/javascript" src="scripts/cc/member.js"></script>
    <script type="text/javascript" src="scripts/cc/core.js"></script>
    <script type="text/javascript" src="scripts/mf/alias.js"></script>
    <script type="text/javascript" src="scripts/mf/client.js"></script>
    <script type="text/javascript" src="scripts/mf/vault.js"></script>
    <script type="text/javascript" src="scripts/mf/objectOps.js"></script>
    <script type="text/javascript" src="scripts/web.js"></script>
    <script type="text/javascript" src="scripts/cc/public.js"></script>
   
    
    <script type="text/javascript">
        
        "use strict";
        function OnNewDashboard(dashboard) {
            /// <summary>Gets called when a new dashboard object is created.</summary>
            /// <param name="dashboard" type="MFiles.Dashboard">The newly created dashboard.</param>

            // Register a handler to listen the started event.
            dashboard.Events.Register(MFiles.Event.Started, getDashboardStartedHandler(dashboard));
        }

        function getDashboardStartedHandler(dashboard) {
            /// <summary>Returns the event handler to handle the "started" event of a dashboard.</summary>
            /// <param name="dashboard" type="MFiles.Dashboard">The current dashboard object.</param>
            /// <returns type="MFiles.Events.OnStarted">The event handler.</returns>

            // Return the event handler.
            return function () {
                //此视图下的子路径列表
                var mbrId = dashboard.CustomData.mbrIdFather;
           
                // Shortcuts.
                var shellFrame = dashboard.Parent;
                var loc = new localization();
                var additionalSectionShown = false;

                initializeLayout(dashboard, shellFrame);
                 
                //根据路径创建对应Listing
                var listing = createListingForPath(shellFrame, loc, $('#listing_members'), shellFrame.CurrentPath, //"项目成员",
                 function (container, objectsCount) {
                     // Specify the relative height of this listing.
                     var heightNumber = 20;
                     if (objectsCount <= 2)
                         heightNumber = 15;
                     if (objectsCount <= 1)
                         heightNumber = 10;
                     if (objectsCount > 20)
                         heightNumber = 30;
                     if (objectsCount == 0) {
                         header.find(container.find(".mf-listing-header")).hide();
                     }
                     container.data("heightNumber", heightNumber);
                     additionalSectionShown = true;
                 });

                if (listing) CC.SetCommTheme(listing);

                //设置listing中 Header Div 的宽度
                publicUtils.SetDivWidth("divMember");

                //获取vault对象
                var vault = shellFrame.ShellUI.Vault;
                var userId = MF.vault.getCurrentUserId(vault);

                //取出json文件中需要显示的列id
                var temp = CC.member.GetArray(vault); 
                var folderDefs = publicUtils.getFolderDefs(mbrId); 
                publicUtils.SetListingHeader(folderDefs, shellFrame, temp);
                 
                // Listen to the ActiveListingChanged event.
                shellFrame.Events.Register(MFiles.Event.ActiveListingChanged, getActiveListingChangedHandler(shellFrame));

                // Resize panes.
                $(window).resize(resizedWithHeight($("#btnInvite").height()));
                resizedWithHeight($("#btnInvite").height())();
  

                $("#btnDel").click(function () {
                    var objVers = shellFrame.ActiveListing.CurrentSelection.ObjectVersions;
                    if (objVers.Count == 1) {
                        if (window.confirm('确定要删除选择的联系人吗？')) {
                            var contactId = objVers.Item(1).ObjVer.ID;
                            var account = CC.member.getAccount(vault, contactId);
                            if (account.userId === userId) {
                                alert('不能删除自己！'+account.name);
                                return false;
                            }
                            var res = delProjectMember(vault, account, contactId);
                            var resObj = $.parseJSON(res);
                            if (resObj.status !== 200) {
                                alert(resObj.response.Message);
                            }
                            return true;
                        } else {
                            return false;
                        }
                    } else {
                        alert('只能同时删除一个联系人');
                    }
                });

                $("#btnInvite").click(function () {
                    postInviteMemberData(shellFrame);
                });
            };
        }

        function delProjectMember(vault, account, contactId) {
            var token = CC.getToken(vault);
            var projectId = CC.getProjectId(vault);
            //删除服务器上数据
            var model = {
                ContactId: contactId,
                UserName: account.name,
                ProjectId: projectId,
                MFUserId: MF.vault.getCurrentUserId(vault)
            }
            var res = webapi.removeMember(vault, model, token);
            return res;
        }

        function postInviteMemberData(shellFrame) {
            CC.member.inviteMember(shellFrame);
        }

    </script>
</head>
<body id="pageBody">
    <div id="fullareadiv" style="width: 100%; height: 90%; padding: 0px; margin: 0px; border: 0px;">
        <div id="listings" class="mf-panel-container" style="width: 100%; height: 100%; padding: 0px;  margin-bottom: 30px; border: 0px;">
            <div id="listing_members" class="mf-panel" style="width: 100%; height: 50%; padding: 0px;margin: 0px; border: 0px; overflow: hidden;">
                <div id="divMember" >
                </div>
                <div class="mf-listing-content">
                </div>
            </div>   
        </div>
    </div>
    <div style=" cursor: pointer; height: 30px; line-height: 30px; font-size: 14px; color: #fff; overflow: hidden; position: absolute; left: 0; bottom: 0; width: 100%;">
         
        <div class="sdHeaderDiv" id="btnInvite">
            <a href="#" class="sdHeaderDivA">
                <img src="images/buttons/邀请成员.png" width="22" height="22" /> 
                邀请成员
            </a>
        </div>

        <div class="sdHeaderDiv" id="btnDel" style="margin-left: 120px; ">
            <a href="#" class="sdHeaderDivA">
                <img src="images/buttons/删除成员.png" width="22" height="22" /> 
                删除成员
            </a>
        </div>
    </div>
</body>
</html>