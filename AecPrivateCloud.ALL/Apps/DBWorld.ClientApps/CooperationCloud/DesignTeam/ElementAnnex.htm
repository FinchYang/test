<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html>
    <head>
        <title>CreateElement</title>
        
        <script type="text/javascript" src="scripts/jquery-ui-1.10.0.custom/js/jquery-1.9.0.js"></script>
        <script src="scripts/md/bim.js" type="text/javascript"></script>

        <style type="text/css">
        * {
            margin: 0;
            padding: 0;
            font-size: 14px;
            font-family: Helvetica,Arial,FreeSans,sans-serif;
        }
        .guidDiv {
            min-width:530px;
        }

        .guidTable {
            width: 100%;
        }

            .guidTable tr td {
                padding: 5px 10px;
            }

                .guidTable tr td:first-child {
                    width: 100px;
                    text-align: right;
                }

            .guidTable tr:first-child {
                background: rgb(1, 125, 199);
            }

            .guidTable tr td.tableTitle {
                font-size: 16px;
                font-weight: bold;
                color: #fff;
                padding: 10px 0 10px 30px;
                text-align: left;
            }

        li {
            list-style: none;
        }

        .inputText {
            border: 1px solid #ccc;
            font-family: Helvetica,Arial,FreeSans,sans-serif;
            font-size: 14px;
            height: 26px;
            line-height: 26px;
            padding: 0 2px;
            vertical-align: middle;
            width: 250px;
        }

        .inputTextarea {
            border: none;
            resize: none;
            font-family: Helvetica,Arial,FreeSans,sans-serif;
            font-size: 14px;
            line-height: 22px;
            min-height: 100px;
            max-height: 150px;
            vertical-align: middle;
            width: 100%;
        }

        .divTextarea {
            border-radius: 3px;
            border: 1px solid #ccc;
            padding: 10px;
        }

        .docUl li {
            line-height: 25px;
        }

            .docUl li input[type=checkbox] {
                margin-right: 10px;
            }

        .search_div.btn_div {
            margin: 0;
            display: inline;
            margin-left: 20px;
        }

        .btn_div {
            margin-top: 10px;
        }

            .btn_div button {
                font-size: 12px;
                background: #1693c9;
                height: 26px;
                width: 90px;
                line-height: 0;
                overflow: hidden;
                -moz-user-select: none;
                border: medium none;
                color: white;
                cursor: pointer;
                display: inline-block;
                font-family: Helvetica,Arial,FreeSans,sans-serif;
                margin: 0 2px 0 0;
                padding: 6px 9px;
                text-align: center;
                vertical-align: middle;
                white-space: nowrap;
            }

                .btn_div button:hover {
                    background: #006dbd;
                }

                .btn_div button:active {
                    padding: 1px 0 0 1px;
                }
        
    </style>
    
    <script type="text/javascript">
            var oVault = null;
            var shellframe = null;
            var note = null;
            function OnNewDashboard(dashboard) {
                //myDashboard = dashboard;
                //dashboardData = dashboard.CustomData;
                shellframe = dashboard.CustomData.shellframe;
                oVault = shellframe.ShellUI.Vault;
        
                dashboard.Events.Register(MFiles.Event.Started, getDashboardStartedHandler(dashboard));

            }

            function getDashboardStartedHandler(dashboard) {
                /// <summary>Returns the event handler to handle the "started" event of a dashboard.</summary>
                /// <param name="dashboard" type="MFiles.Dashboard">The current dashboard object.</param>
                /// <returns type="MFiles.Events.OnStarted">The event handler.</returns>

                // Return the event handler.
                return function () {
                  //var shellFrame = dashboard.Parent;
                    note = dashboard.CustomData.noteData;
                    $('#elementid').html(note.Name);

                    var eleClassId = oVault.ClassOperations.GetObjectClassIDByAlias(md.attachments.classAlias); //"ClassElement"
                    //var guidId = oVault.PropertyDefOperations.GetPropertyDefIDByAlias("PropGuid");
                    var componentModelNameId = oVault.PropertyDefOperations.GetPropertyDefIDByAlias(md.attachments.propDefs.PropComponentModelLU); //"PropComponentModelLU"
                    //
                    var modelId = note.Id;

                    var modelres = searchElementByModel(oVault, eleClassId, componentModelNameId, modelId);

                    var descriptionId = oVault.PropertyDefOperations.GetPropertyDefIDByAlias(md.attachments.propDefs.PropAnnexDescription); //"PropAnnexDescription"
                    var typeId = oVault.PropertyDefOperations.GetPropertyDefIDByAlias(md.attachments.propDefs.PropType); //"PropType"
                    var docId = oVault.PropertyDefOperations.GetPropertyDefIDByAlias(md.attachments.propDefs.PropDoc); //"PropDoc"
                    //alert(guidres.count);
                    if (modelres.count > 0 && modelres.count === 1) {

                        var eleObjVer = modelres.Item(1).ObjVer;
                        
                        var description = oVault.ObjectPropertyOperations.GetProperty(eleObjVer, descriptionId).Value.Displayvalue;
                        $('#description').html(description);
                      
                        //alert(description);
                        var type = oVault.ObjectPropertyOperations.GetProperty(eleObjVer, typeId).Value.Displayvalue;
                        $('#type').val(type);
                        //alert(type);

                        var docsLookUps = oVault.ObjectPropertyOperations.GetProperty(eleObjVer, docId).Value.GetValueAsLookups();
                        var listring = '附件';
                        for (var i = 1; i < docsLookUps.count + 1; i++) {
            
                            (function(i){
                                var docName = docsLookUps.Item(i).DisplayValue;
                                var docitemId = docsLookUps.item(i).item;
                             
                                var objId = MFiles.CreateInstance('ObjID');

                                objId.SetIDs(MFBuiltInObjectTypeDocument, docitemId);
                  
                                var objVer = oVault.ObjectOperations.GetLatestObjVer(objId, true, false);
                                var docFile = oVault.ObjectOperations.GetObjectInfo(objVer, true, false).Files(1);
                                
                                listring += "<li ><input name=\"doc\" id=\"" + i + "\" value=\"" + docitemId + "\" type=\"checkbox\" /><a href=\"#\" id=\"" + docitemId + "\">" + docName + "</a></li>";
                                //listring += "\n" + docName;
                                $('#body').on('click', '#' + docitemId + '', function() {
                                    oVault.ObjectFileOperations.OpenFileInDefaultApplication(0, objVer, docFile.FileVer, MFFileOpenMethodShowInShell);
                                });
                            })(i);
                        }

                        $('#docUl').html(listring);
                    }
                }
            }

            $(function() {
                $('#button_search').click(function() {
                    var keyword = $('#search').val();
                    if (keyword === "") {
                        alert("请输入搜索关键字！");
                    } else {
                        var docResults = searchDocments(oVault, keyword);
                        if (docResults.count === 0) return;
                        var ul = $('#docUl');
                        ul.innerHTML = "";
                        var listring = '附件';
                      
                        for (var i = 1; i < docResults.count + 1; i++) {
                            (function(i) {

                                var docName = docResults.Item(i).title;
                                var docId = docResults.item(i).ObjVer.ID;
                                var docFile = docResults.item(i).Files(1);
    
                                listring += "<li ><input name=\"doc\" id=\"" + i + "\" value=\"" + docId + "\" type=\"checkbox\" /><a href=\"#\" id=\"" + docId + "\">" + docName + "</a></li>";
                                $('#body').on('click', '#' + docId + '', function () {
                                    oVault.ObjectFileOperations.OpenFileInDefaultApplication(0, docResults.item(i).ObjVer, docFile.FileVer, MFFileOpenMethodShowInShell);
                                });


                            })(i);
                        }
                        $('#docUl').html(listring);
                    }
                });
            
            });
   
            $(function() {
                $('#ok').click(function () {
                    if (confirm("是否保存附件信息？")) {
                        //Guid
                        var guid = note.PartId;
                        var docIds = new Array();
                        var i = 0;
                        $("input[name='doc']:checked").each(function() {
                            docIds.push(this.value);
                            //alert(docIds[i]);
                            i++;
                        });

                        var description = $('#description').val();
                       // alert(description);
                        var type = $('#type').val();
                        //alert(type);

                        try {
                            createNewElement(oVault, note, docIds, description, type);
                            alert("创建附件成功！");
                        } catch (e) {
                            alert(e.stack || e.message || e.toString());
                        }

                    } else {
                        
                    }
                });
            });


            function searchDocments(vault, keyword) {
                var scs = MFiles.CreateInstance('SearchConditions');

                //var scClass = MFiles.CreateInstance('SearchCondition');
                //scClass.ConditionType = MFConditionTypeEqual;
                //scClass.Expression.DataPropertyValuePropertyDef = MFBuiltInPropertyDefClass;
                //scClass.TypedValue.SetValue(MFDatatypeLookup, 0);
                //scs.Add(-1, scClass);

                var scType = MFiles.CreateInstance('SearchCondition');
                scType.ConditionType = MFConditionTypeEqual;
                scType.Expression.DataStatusValueType = MFStatusTypeObjectTypeID;
                scType.TypedValue.SetValue(MFDatatypeLookup, 0);
                scs.Add(-1, scType);

                var scDel = MFiles.CreateInstance('SearchCondition');
                scDel.ConditionType = MFConditionTypeEqual;
                scDel.Expression.DataStatusValueType = MFStatusTypeDeleted;
                scDel.TypedValue.SetValue(MFDatatypeBoolean, false);
                scs.Add(-1, scDel);

                var scProp1 = MFiles.CreateInstance('SearchCondition');
                scProp1.ConditionType = MFConditionTypeContains;
                scProp1.Expression.DataPropertyValuePropertyDef = 0;//0;
                if (keyword === "") {
                    scProp1.TypedValue.SetValueToNull(MFDatatypeText);
                } else {
                    scProp1.TypedValue.SetValue(MFDatatypeText, keyword);
                }
                scs.Add(-1, scProp1);

                return vault.ObjectSearchOperations.SearchForObjectsByConditions(scs, MFSearchFlagNone, false); //.Item(1).ObjVer;

            }

            function createNewElement(vault, modelObject, docIds, description, type) {
                var pvs = MFiles.CreateInstance('PropertyValues');
                
                //name or title
                //var pv1 = createProperty(MFBuiltInPropertyDefNameOrTitle, MFDatatypeText, name);
                //pvs.Add(-1, pv1);

                //model
                var modelId = vault.PropertyDefOperations.GetPropertyDefIDByAlias(md.attachments.propDefs.PropComponentModelLU); //"PropComponentModelLU"
                var pv2 = createProperty(modelId, MFDatatypeLookup, modelObject.Id);
                pvs.Add(-1, pv2);
                var pv3;
                //if (docIds.count > 0) {

                    //doc
                    var lookups = MFiles.CreateInstance('Lookups');
                    for (var i = 0; i < docIds.length; i++) {
                        var lu = MFiles.CreateInstance('Lookup');
                        lu.Item = docIds[i]; //sItems.ObjectVersions.Item(i).ObjVer.Id;
                        //alert(docIds[i]);
                        lookups.Add(-1, lu);

                    }
                    var docId = vault.PropertyDefOperations.GetPropertyDefIDByAlias(md.attachments.propDefs.PropDoc); //"PropDoc"
                     pv3 = createProperty(docId, MFDatatypeMultiSelectLookup, lookups);
                //} else {
                    // pv3 = createPropertyToNull(docId, MFDatatypeMultiSelectLookup);
              //  }
                pvs.Add(-1, pv3);

                //description
                var descripId = vault.PropertyDefOperations.GetPropertyDefIDByAlias(md.attachments.propDefs.PropAnnexDescription); //"PropAnnexDescription"
                var pv4 = createProperty(descripId, MFDatatypeMultiLineText, description);
                pvs.Add(-1, pv4);

                //type
                var typeId = vault.PropertyDefOperations.GetPropertyDefIDByAlias(md.attachments.propDefs.PropType); //"PropType"
                var pv5 = createProperty(typeId, MFDatatypeText, type);
                pvs.Add(-1, pv5);

              

                var typeId = vault.ObjectTypeOperations.GetObjectTypeIDByAlias(md.attachments.typeAlias); //"ObjectTypeElement"
                var classId = vault.ClassOperations.GetObjectClassIDByAlias(md.attachments.classAlias); //"ClassElement"
                var eleRes = searchElementByModel(vault, classId, modelId, modelObject.Id);
                //alert(eleRes.count);
                if (eleRes.count > 0) {
                    var objVer = eleRes.Item(1).ObjVer;
                    var checkedOut = oVault.ObjectOperations.IsCheckedOut(objVer.ObjID, false);
                    var obj1 = null;
                    if (!checkedOut) {
                        obj1 = oVault.ObjectOperations.CheckOut(objVer.ObjID);

                    } else {
                        obj1 = oVault.ObjectOperations.GetObjectInfo(objVer, true, false);
                    }
                    obj1 = oVault.ObjectPropertyOperations.SetProperties(obj1.ObjVer, pvs).VersionData;
                    var checkInObjVer = oVault.ObjectOperations.CheckIn(obj1.ObjVer);
                   
                } else {

                    //class
                    
                    var pv6 = createProperty(MFBuiltInPropertyDefClass, MFDatatypeLookup, classId);
                    pvs.Add(-1, pv6);

                    var newObject = oVault.ObjectOperations.CreateNewObject(
                    typeId, pvs, MFiles.CreateInstance('SourceObjectFiles'), MFiles.CreateInstance('AccessControlList'));
                    var objVersion = oVault.ObjectOperations.CheckIn(newObject.ObjVer);
                }
               

               
            }

            function searchById(oVault, classID, propID, propValue) {
                var scs = MFiles.CreateInstance('SearchConditions');
                var scDel = MFiles.CreateInstance('SearchCondition');
                scDel.ConditionType = MFConditionTypeEqual;
                scDel.Expression.DataStatusValueType = MFStatusTypeDeleted;
                scDel.TypedValue.SetValue(MFDatatypeBoolean, false);
                scs.Add(-1, scDel);

                var scCLASS = MFiles.CreateInstance('SearchCondition');
                scCLASS.ConditionType = MFConditionTypeEqual;
                scCLASS.Expression.DataPropertyValuePropertyDef = MFBuiltInPropertyDefClass;
                scCLASS.TypedValue.SetValue(MFDatatypeLookup, classID);
                scs.Add(-1, scCLASS);

                var scProp1 = MFiles.CreateInstance('SearchCondition');
                scProp1.ConditionType = MFConditionTypeEqual;
                scProp1.Expression.DataPropertyValuePropertyDef = propID;//0;
                scProp1.TypedValue.SetValue(MFDatatypeText, propValue);
                scs.Add(-1, scProp1);
                return oVault.ObjectSearchOperations.SearchForObjectsByConditions(scs, MFSearchFlagNone, false); //.Item(1).ObjVer;
            }

            function createProperty (propId, valueType, value) {
                ///<summary>生成M-Files中的PropertyValue</summary>
                var pv = MFiles.CreateInstance('PropertyValue');
                pv.PropertyDef = propId;
                pv.Value.SetValue(valueType, value);
                return pv;
            }
            function createPropertyToNull(propId, valueType) {
                ///<summary>生成M-Files中的PropertyValue</summary>
                var pv = MFiles.CreateInstance('PropertyValue');
                pv.PropertyDef = propId;
                pv.Value.SetValueToNULL(valueType);
                return pv;
            }

            function searchElementByModel(oVault, classID, propID, modelId) {
                var scs = MFiles.CreateInstance('SearchConditions');
                var scDel = MFiles.CreateInstance('SearchCondition');
                scDel.ConditionType = MFConditionTypeEqual;
                scDel.Expression.DataStatusValueType = MFStatusTypeDeleted;
                scDel.TypedValue.SetValue(MFDatatypeBoolean, false);
                scs.Add(-1, scDel);

                var scCLASS = MFiles.CreateInstance('SearchCondition');
                scCLASS.ConditionType = MFConditionTypeEqual;
                scCLASS.Expression.DataPropertyValuePropertyDef = MFBuiltInPropertyDefClass;
                scCLASS.TypedValue.SetValue(MFDatatypeLookup, classID);
                scs.Add(-1, scCLASS);

                var scProp1 = MFiles.CreateInstance('SearchCondition');
                scProp1.ConditionType = MFConditionTypeEqual;
                scProp1.Expression.DataPropertyValuePropertyDef = propID;
                scProp1.TypedValue.SetValue(MFDatatypeLookup, modelId);
                scs.Add(-1, scProp1);
                return oVault.ObjectSearchOperations.SearchForObjectsByConditions(scs, MFSearchFlagNone, false); //.Item(1).ObjVer;
            }
    </script>
</head>



    <body id="body">
    <div class="guidDiv">
        <table cellpadding="0" cellspacing="0" border="0" class="guidTable">
            <tr>
                <td colspan="2" class="tableTitle">
                    新建构件附件
                </td>
            </tr>
            <tr>
                <td>
                    构件模型：
                </td>
                <td>
                    <p type="text" id="elementid" name="id" />
                </td>
            </tr>
            <tr>
                <td>
                    添加附件：
                </td>
                <td>
                    <input id="search" name="search" type="search" class="inputText" />
                    <div class="btn_div search_div">
                        <button id="button_search" name="searchBotton">添加</button>
                    </div>
                </td>
            </tr>
            <tr>
                <td></td>
                <td>
                    <ul id="docUl" class="docUl">

                        <!--<li>
                            <input type="checkbox" />第一行
                        </li>

                        <li>
                            <input type="checkbox" />第一行
                        </li>
                        <li>
                            <input type="checkbox" />第一行
                        </li>
                        <li>
                            <input type="checkbox" />第一行
                        </li>-->
                    </ul>
                </td>
            </tr>
            <tr>
                <td>
                    描述：
                </td>
                <td>
                    <div class="divTextarea">
                        <textarea id="description" name="description" class="inputTextarea"></textarea>
                    </div>
                </td>
            </tr>

            <tr>
                <td>
                    分类：
                </td>
                <td>
                    <input id="type" name="type" class="inputText" style="width:100%;" />
                </td>
            </tr>
            <tr>
                <td></td>
                <td>
                    <div class="btn_div">
                        <button id="ok" name="ok">确定</button>
                        <!--<button id="cancel" name="cancel">取消</button>-->
                    </div>
                </td>
            </tr>
        </table>
    </div>



</body>

</html>